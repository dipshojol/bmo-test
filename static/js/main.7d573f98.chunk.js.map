{"version":3,"sources":["components/Input/index.js","components/Button/index.js","components/Restaurant/index.js","App.js","actions/index.js","serviceWorker.js","reducers/index.js","saga/index.js","index.js"],"names":["Input","onChange","value","label","name","type","className","Button","onClick","da","disabled","Restaurant","props","address","city","state","area","postal_code","country","phone","price","image_url","src","alt","class","App","dispatch","useDispatch","useState","cityName","updateCityName","filterby","updateFilterValue","filteredRestaurantsList","useSelector","restaurants","filter","data","toUpperCase","includes","event","target","payload","length","map","restaurant","i","key","Boolean","window","location","hostname","match","INITIAL_STATE","rootSaga","fetchRestaurant","all","takeEvery","fetch","then","response","json","put","sagaMiddleware","createSagaMiddleware","store","createStore","action","applyMiddleware","run","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d573f98.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nconst Input = ({onChange, value, label, name, type=\"text\"}) => {\r\n\r\n    return(\r\n        <div className=\"input-conatiner\">\r\n            { label ? <label>{label}</label> : null }\r\n            <input name={name} className=\"input\" type={type} onChange={onChange} value={value} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { useState } from 'react';\r\nimport './index.css';\r\n\r\nconst Button = ({ onClick, value, label, da, type = 'submit' }) => {\r\n  return (\r\n    <div className=\"button-conatiner\">\r\n      <button disabled={da} className=\"button\" type={type} onClick={onClick}>\r\n        {value}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\r\nimport './index.css';\r\n\r\nconst Restaurant = props => {\r\n  const {\r\n    name,\r\n    address,\r\n    city,\r\n    state,\r\n    area,\r\n    postal_code,\r\n    country,\r\n    phone,\r\n    price,\r\n    image_url\r\n  } = props;\r\n  return (\r\n    <div className=\"restaurant-conatiner\">\r\n      <img className=\"restaurant-img\" src={image_url} alt={name}></img>\r\n      <div className=\"details\">\r\n        <div>\r\n          <span class=\"txt-strong\">Name: </span>\r\n          {name}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">Address: </span>\r\n          {address}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">City: </span>\r\n          {city}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">State: </span>\r\n          {state}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">Area: </span>\r\n          {area}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">Postal code: </span>\r\n          {postal_code}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">Country: </span>\r\n          {country}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">Phone: </span>\r\n          {phone}\r\n        </div>\r\n        <div>\r\n          <span class=\"txt-strong\">Price: </span>\r\n          {price}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Restaurant;\r\n","import React, { useState } from 'react';\nimport 'whatwg-fetch';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Input from './components/Input';\nimport Button from './components/Button';\nimport Restaurant from './components/Restaurant';\nimport { fetchRestaurantList, updateRestaurantList } from './actions';\nimport './App.css';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [cityName, updateCityName] = useState('');\n  const [filterby, updateFilterValue] = useState('');\n  const restaurantsList = useSelector(state => state.restaurants);\n\n  const onInputChange = event => {\n    updateCityName(event.target.value);\n  };\n\n  const onFilterChange = event => {\n    updateFilterValue(event.target.value);\n  };\n\n  const onSubmit = event => {\n    dispatch(fetchRestaurantList(cityName));\n  };\n  const filteredRestaurantsList = restaurantsList.filter(data => {\n    return !!(\n      data.name.toUpperCase().includes(filterby.toUpperCase()) ||\n      data.area.toUpperCase().includes(filterby.toUpperCase()) ||\n      data.address.toUpperCase().includes(filterby.toUpperCase())\n    );\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"controlPanel\">\n        <div className=\"controlPanel-input\">\n          <Input\n            value={cityName}\n            onChange={onInputChange}\n            label=\"Search Town\"\n          />\n        </div>\n        <div className=\"controlPanel-input-button\">\n          <Button da={!cityName} onClick={onSubmit} value=\"Search\">\n            Search\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"restaurants\">\n        <div className=\"controlPanel-input\">\n          <Input\n            value={filterby}\n            onChange={onFilterChange}\n            label=\"Filter by Name/Area/Address\"\n          />\n        </div>\n\n        <div className=\"restaurants-list\">\n          {filteredRestaurantsList && filteredRestaurantsList.length ? (\n            filteredRestaurantsList.map((restaurant, i) => (\n              <Restaurant key={i} {...restaurant} />\n            ))\n          ) : (\n            <div>No Restaurants found. Please update filter</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport const FETCH_RESTAURANT_LIST = 'FETCH_RESTAURANT_LIST';\r\nexport const UPDATE_RESTAURANT_LIST = 'UPDATE_RESTAURANT_LIST';\r\n\r\nexport const fetchRestaurantList = payload => {\r\n    return {\r\n        type: FETCH_RESTAURANT_LIST,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const updateRestaurantList = payload => {\r\n    return {\r\n        type: UPDATE_RESTAURANT_LIST,\r\n        payload\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_RESTAURANT_LIST } from '../actions'\r\nconst INITIAL_STATE = {\r\n    restaurants: []\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_RESTAURANT_LIST:\r\n            return {\r\n                ...state,\r\n                restaurants: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { put, takeEvery, all } from 'redux-saga/effects';\r\nimport { FETCH_RESTAURANT_LIST, updateRestaurantList } from '../actions';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([yield takeEvery(FETCH_RESTAURANT_LIST, fetchRestaurant)]);\r\n}\r\n\r\nfunction* fetchRestaurant(data) {\r\n  const { restaurants } = yield fetch(\r\n    `https://opentable.herokuapp.com/api/restaurants?city=${data.payload}`\r\n  ).then(response => response.json());\r\n  yield put(updateRestaurantList(restaurants));\r\n}\r\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\nimport { render } from 'react-dom';\n// import thunk from 'redux-thunk';\nimport logger from 'redux-logger'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\nimport rootSaga from './saga'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}